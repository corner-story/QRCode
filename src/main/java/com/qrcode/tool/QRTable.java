package com.qrcode.tool;

import java.util.ArrayList;
import java.util.List;

public final class QRTable {
    // 数字编码中每种版本和纠错级别对应的最大容量
    // NumericMode
    public static int[] CharacterCapacities_NumericMode = new int[]{
            41, 34, 27, 17, 77, 63, 48, 34, 127, 101, 77, 58, 187, 149, 111, 82
            ,255, 202, 144, 106, 322, 255, 178, 139, 370, 293, 207, 154, 461, 365, 259, 202
            ,552, 432, 312, 235, 652, 513, 364, 288, 772, 604, 427, 331, 883, 691, 489, 374
            ,1022, 796, 580, 427, 1101, 871, 621, 468, 1250, 991, 703, 530, 1408, 1082, 775, 602
            ,1548, 1212, 876, 674, 1725, 1346, 948, 746, 1903, 1500, 1063, 813, 2061, 1600, 1159, 919
            ,2232, 1708, 1224, 969, 2409, 1872, 1358, 1056, 2620, 2059, 1468, 1108, 2812, 2188, 1588, 1228
            ,3057, 2395, 1718, 1286, 3283, 2544, 1804, 1425, 3517, 2701, 1933, 1501, 3669, 2857, 2085, 1581
            ,3909, 3035, 2181, 1677, 4158, 3289, 2358, 1782, 4417, 3486, 2473, 1897, 4686, 3693, 2670, 2022
            ,4965, 3909, 2805, 2157, 5253, 4134, 2949, 2301, 5529, 4343, 3081, 2361, 5836, 4588, 3244, 2524
            ,6153, 4775, 3417, 2625, 6479, 5039, 3599, 2735, 6743, 5313, 3791, 2927, 7089, 5596, 3993, 3057
    };

    // AlphanumericMode
    public static int[] CharacterCapacities_AlphanumericMode = new int[]{
            25, 20, 16, 10, 47, 38, 29, 20, 77, 61, 47, 35, 114, 90, 67, 50
            ,154, 122, 87, 64, 195, 154, 108, 84, 224, 178, 125, 93, 279, 221, 157, 122
            ,335, 262, 189, 143, 395, 311, 221, 174, 468, 366, 259, 200, 535, 419, 296, 227
            ,619, 483, 352, 259, 667, 528, 376, 283, 758, 600, 426, 321, 854, 656, 470, 365
            ,938, 734, 531, 408, 1046, 816, 574, 452, 1153, 909, 644, 493, 1249, 970, 702, 557
            ,1352, 1035, 742, 587, 1460, 1134, 823, 640, 1588, 1248, 890, 672, 1704, 1326, 963, 744
            ,1853, 1451, 1041, 779, 1990, 1542, 1094, 864, 2132, 1637, 1172, 910, 2223, 1732, 1263, 958
            ,2369, 1839, 1322, 1016, 2520, 1994, 1429, 1080, 2677, 2113, 1499, 1150, 2840, 2238, 1618, 1226
            ,3009, 2369, 1700, 1307, 3183, 2506, 1787, 1394, 3351, 2632, 1867, 1431, 3537, 2780, 1966, 1530
            ,3729, 2894, 2071, 1591, 3927, 3054, 2181, 1658, 4087, 3220, 2298, 1774, 4296, 3391, 2420, 1852
    };

    // Byte Mode
    public static int[] CharacterCapacities_ByteMode = new int[]{
            17, 14, 11, 7, 32, 26, 20, 14, 53, 42, 32, 24, 78, 62, 46, 34
            ,106, 84, 60, 44, 134, 106, 74, 58, 154, 122, 86, 64, 192, 152, 108, 84
            ,230, 180, 130, 98, 271, 213, 151, 119, 321, 251, 177, 137, 367, 287, 203, 155
            ,425, 331, 241, 177, 458, 362, 258, 194, 520, 412, 292, 220, 586, 450, 322, 250
            ,644, 504, 364, 280, 718, 560, 394, 310, 792, 624, 442, 338, 858, 666, 482, 382
            ,929, 711, 509, 403, 1003, 779, 565, 439, 1091, 857, 611, 461, 1171, 911, 661, 511
            ,1273, 997, 715, 535, 1367, 1059, 751, 593, 1465, 1125, 805, 625, 1528, 1190, 868, 658
            ,1628, 1264, 908, 698, 1732, 1370, 982, 742, 1840, 1452, 1030, 790, 1952, 1538, 1112, 842
            ,2068, 1628, 1168, 898, 2188, 1722, 1228, 958, 2303, 1809, 1283, 983, 2431, 1911, 1351, 1051
            ,2563, 1989, 1423, 1093, 2699, 2099, 1499, 1139, 2809, 2213, 1579, 1219, 2953, 2331, 1663, 1273
    };



    // 每种数据格式的最大CodeWords数量
    private static int[] MaxCodeWords = new int[]{
            19, 16, 13, 9, 34, 28, 22, 16, 55, 44, 34, 26, 80, 64, 48, 36
            , 108, 86, 62, 46, 136, 108, 76, 60, 156, 124, 88, 66, 194, 154, 110, 86
            , 232, 182, 132, 100, 274, 216, 154, 122, 324, 254, 180, 140, 370, 290, 206, 158
            , 428, 334, 244, 180, 461, 365, 261, 197, 523, 415, 295, 223, 589, 453, 325, 253
            , 647, 507, 367, 283, 721, 563, 397, 313, 795, 627, 445, 341, 861, 669, 485, 385
            , 932, 714, 512, 406, 1006, 782, 568, 442, 1094, 860, 614, 464, 1174, 914, 664, 514
            , 1276, 1000, 718, 538, 1370, 1062, 754, 596, 1468, 1128, 808, 628, 1531, 1193, 871, 661
            , 1631, 1267, 911, 701, 1735, 1373, 985, 745, 1843, 1455, 1033, 793, 1955, 1541, 1115, 845
            , 2071, 1631, 1171, 901, 2191, 1725, 1231, 961, 2306, 1812, 1286, 986, 2434, 1914, 1354, 1054
            , 2566, 1992, 1426, 1096, 2702, 2102, 1502, 1142, 2812, 2216, 1582, 1222, 2956, 2334, 1666, 1276

    };

    // 把Data CodeWords分成Blocks, 每个Block的纠错码所占的CodeWords个数
    private static int[] ECCodewordsPerBlock = new int[]{
            7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 18, 22, 20, 18, 26, 16
            , 26, 24, 18, 22, 18, 16, 24, 28, 20, 18, 18, 26, 24, 22, 22, 26
            , 30, 22, 20, 24, 18, 26, 24, 28, 20, 30, 28, 24, 24, 22, 26, 28
            , 26, 22, 24, 22, 30, 24, 20, 24, 22, 24, 30, 24, 24, 28, 24, 30
            , 28, 28, 28, 28, 30, 26, 28, 28, 28, 26, 26, 26, 28, 26, 30, 28
            , 28, 26, 28, 30, 28, 28, 30, 24, 30, 28, 30, 30, 30, 28, 30, 30
            , 26, 28, 30, 30, 28, 28, 28, 30, 30, 28, 30, 30, 30, 28, 30, 30
            , 30, 28, 30, 30, 30, 28, 30, 30, 30, 28, 30, 30, 30, 28, 30, 30
            , 30, 28, 30, 30, 30, 28, 30, 30, 30, 28, 30, 30, 30, 28, 30, 30
            , 30, 28, 30, 30, 30, 28, 30, 30, 30, 28, 30, 30, 30, 28, 30, 30

    };

    // group1的blocks数量
    private static byte[] Group1Blocks = new byte[]{
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4
            , 1, 2, 2, 2, 2, 4, 4, 4, 2, 4, 2, 4, 2, 2, 4, 4
            , 2, 3, 4, 4, 2, 4, 6, 6, 4, 1, 4, 3, 2, 6, 4, 7
            , 4, 8, 8, 12, 3, 4, 11, 11, 5, 5, 5, 11, 5, 7, 15, 3
            , 1, 10, 1, 2, 5, 9, 17, 2, 3, 3, 17, 9, 3, 3, 15, 15
            , 4, 17, 17, 19, 2, 17, 7, 34, 4, 4, 11, 16, 6, 6, 11, 30
            , 8, 8, 7, 22, 10, 19, 28, 33, 8, 22, 8, 12, 3, 3, 4, 11
            , 7, 21, 1, 19, 5, 19, 15, 23, 13, 2, 42, 23, 17, 10, 10, 19
            , 17, 14, 29, 11, 13, 14, 44, 59, 12, 12, 39, 22, 6, 6, 46, 2
            , 17, 29, 49, 24, 4, 13, 48, 42, 20, 40, 43, 10, 19, 18, 34, 20

    };

    // Group1中每个block所占的codeword个数
    private static byte[] Group1BlocksCodeWords = new byte[]{
            19, 16, 13, 9, 34, 28, 22, 16, 55, 44, 17, 13, 80, 32, 24, 9
            , 108, 43, 15, 11, 68, 27, 19, 15, 78, 31, 14, 13, 97, 38, 18, 14
            , 116, 36, 16, 12, 68, 43, 19, 15, 81, 50, 22, 12, 92, 36, 20, 14
            , 107, 37, 20, 11, 115, 40, 16, 12, 87, 41, 24, 12, 98, 45, 19, 15
            , 107, 46, 22, 14, 120, 43, 22, 14, 113, 44, 21, 13, 107, 41, 24, 15
            , 116, 42, 22, 16, 111, 46, 24, 13, 121, 47, 24, 15, 117, 45, 24, 16
            , 106, 47, 24, 15, 114, 46, 22, 16, 122, 45, 23, 15, 117, 45, 24, 15
            , 116, 45, 23, 15, 115, 47, 24, 15, 115, 46, 24, 15, 115, 46, 24, 15
            , 115, 46, 24, 15, 115, 46, 24, 16, 121, 47, 24, 15, 121, 47, 24, 15
            , 122, 46, 24, 15, 122, 46, 24, 15, 117, 47, 24, 15, 118, 47, 24, 15

    };

    // Group2中blocks的数量
    private static byte[] Group2Blocks = new byte[]{
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 4, 1, 0, 2, 2, 2
            , 0, 2, 4, 4, 2, 1, 2, 2, 0, 4, 4, 8, 2, 2, 6, 4
            , 0, 1, 4, 4, 1, 5, 5, 5, 1, 5, 7, 7, 1, 3, 2, 13
            , 5, 1, 15, 17, 1, 4, 1, 19, 4, 11, 4, 16, 5, 13, 5, 10
            , 4, 0, 6, 6, 7, 0, 16, 0, 5, 14, 14, 14, 4, 14, 16, 2
            , 4, 13, 22, 13, 2, 4, 6, 4, 4, 3, 26, 28, 10, 23, 31, 31
            , 7, 7, 37, 26, 10, 10, 25, 25, 3, 29, 1, 28, 0, 23, 35, 35
            , 1, 21, 19, 46, 6, 23, 7, 1, 7, 26, 14, 41, 14, 34, 10, 64
            , 4, 14, 10, 46, 18, 32, 14, 32, 4, 7, 22, 67, 6, 31, 34, 61

    };

    // Group2中每个block所占codeword数量
    private static byte[] Group2BlocksCodeWords = new byte[]{
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            , 0, 0, 16, 12, 0, 0, 0, 0, 0, 0, 15, 14, 0, 39, 19, 15
            , 0, 37, 17, 13, 69, 44, 20, 16, 0, 51, 23, 13, 93, 37, 21, 15
            , 0, 38, 21, 12, 116, 41, 17, 13, 88, 42, 25, 13, 99, 46, 20, 16
            , 108, 47, 23, 15, 121, 44, 23, 15, 114, 45, 22, 14, 108, 42, 25, 16
            , 117, 0, 23, 17, 112, 0, 25, 0, 122, 48, 25, 16, 118, 46, 25, 17
            , 107, 48, 25, 16, 115, 47, 23, 17, 123, 46, 24, 16, 118, 46, 25, 16
            , 117, 46, 24, 16, 116, 48, 25, 16, 116, 47, 25, 16, 0, 47, 25, 16
            , 116, 47, 25, 16, 116, 47, 25, 17, 122, 48, 25, 16, 122, 48, 25, 16
            , 123, 47, 25, 16, 123, 47, 25, 16, 118, 48, 25, 16, 119, 48, 25, 16

    };

    private static int[][] AlignmentPatternLocations = new int[][]{
            {}
            ,{6, 18}
            ,{6, 22}
            ,{6, 26}
            ,{6, 30}
            ,{6, 34}
            ,{6, 22, 38}
            ,{6, 24, 42}
            ,{6, 26, 46}
            ,{6, 28, 50}
            ,{6, 30, 54}
            ,{6, 32, 58}
            ,{6, 34, 62}
            ,{6, 26, 46, 66}
            ,{6, 26, 48, 70}
            ,{6, 26, 50, 74}
            ,{6, 30, 54, 78}
            ,{6, 30, 56, 82}
            ,{6, 30, 58, 86}
            ,{6, 34, 62, 90}
            ,{6, 28, 50, 72, 94}
            ,{6, 26, 50, 74, 98}
            ,{6, 30, 54, 78, 102}
            ,{6, 28, 54, 80, 106}
            ,{6, 32, 58, 84, 110}
            ,{6, 30, 58, 86, 114}
            ,{6, 34, 62, 90, 118}
            ,{6, 26, 50, 74, 98, 122}
            ,{6, 30, 54, 78, 102, 126}
            ,{6, 26, 52, 78, 104, 130}
            ,{6, 30, 56, 82, 108, 134}
            ,{6, 34, 60, 86, 112, 138}
            ,{6, 30, 58, 86, 114, 142}
            ,{6, 34, 62, 90, 118, 146}
            ,{6, 30, 54, 78, 102, 126, 150}
            ,{6, 24, 50, 76, 102, 128, 154}
            ,{6, 28, 54, 80, 106, 132, 158}
            ,{6, 32, 58, 84, 110, 136, 162}
            ,{6, 26, 54, 82, 110, 138, 166}
            ,{6, 30, 58, 86, 114, 142, 170}
    };

    /*
    *   格式信息
    * */
    private static String[] FormatStrings = new String[]{
            "111011111000100", "111001011110011", "111110110101010", "111100010011101", "110011000101111", "110001100011000", "110110001000001", "110100101110110", "101010000010010", "101000100100101", "101111001111100", "101101101001011", "100010111111001", "100000011001110", "100111110010111", "100101010100000", "011010101011111", "011000001101000", "011111100110001", "011101000000110", "010010010110100", "010000110000011", "010111011011010", "010101111101101", "001011010001001", "001001110111110", "001110011100111", "001100111010000", "000011101100010", "000001001010101", "000110100001100", "000100000111011"
    };

    /*
    *   版本信息
    * */
    private static String[] VersionStrings = new String[]{
            "000111110010010100", "001000010110111100", "001001101010011001", "001010010011010011", "001011101111110110", "001100011101100010", "001101100001000111", "001110011000001101", "001111100100101000", "010000101101111000", "010001010001011101", "010010101000010111", "010011010100110010", "010100100110100110", "010101011010000011", "010110100011001001", "010111011111101100", "011000111011000100", "011001000111100001", "011010111110101011", "011011000010001110", "011100110000011010", "011101001100111111", "011110110101110101", "011111001001010000", "100000100111010101", "100001011011110000", "100010100010111010", "100011011110011111", "100100101100001011", "100101010000101110", "100110101001100100", "100111010101000001", "101000110001101001"
    };

    private static int getTableIndex(int version, int errorCorrectionLevel) {
        return (version - 1) * 4 + errorCorrectionLevel;
    }

    // 获取一种编码模式的最大位数
    public static int getMaxBits(int version, int errorCorrectionLevel) {
        int i = getTableIndex(version, errorCorrectionLevel);
        return MaxCodeWords[i] * 8;
    }

    // 获取每一个block的纠错CodeWords位数
    public static int getECCodeWords(int version, int errorCorrectionLevel) {
        int i = getTableIndex(version, errorCorrectionLevel);
        return ECCodewordsPerBlock[i];
    }

    // 将Data CodeWords分成不同的Blocks
    public static int[][] getAllBlocks(int[] dataCodeWords, int version, int errorCorrectionLevel) {
        int i = getTableIndex(version, errorCorrectionLevel);
        int[][] blocks = new int[Group1Blocks[i] + Group2Blocks[i]][];
        int index = 0;
        // for group1 blocks
        int blockSize = Group1BlocksCodeWords[i];
        for (int j = 0; j < Group1Blocks[i]; j++) {
            int[] tmp = new int[blockSize];
            System.arraycopy(dataCodeWords, index, tmp, 0, tmp.length);
            index += blockSize;
            blocks[j] = tmp;
        }
        blockSize = Group2BlocksCodeWords[i];
        for (int j = Group1Blocks[i]; j < blocks.length; j++) {
            int[] tmp = new int[blockSize];
            System.arraycopy(dataCodeWords, index, tmp, 0, tmp.length);
            index += blockSize;
            blocks[j] = tmp;
        }
        return blocks;
    }

    // 对blocks交错处理
    public static int[] InterleaveBlocks(int[][] codeWords) {
        List<Integer> ans = new ArrayList<>();
        int index = 0;
        boolean flag = true;
        while (flag) {
            flag = false;
            for (int i = 0; i < codeWords.length; i++) {
                if (index < codeWords[i].length) {
                    ans.add(codeWords[i][index]);
                    flag = true;
                }
            }
            index += 1;
        }
        return ans.stream().mapToInt(i -> i).toArray();
    }

    // 获取Remainder Bits的位数
    public static int getRemainderBits(int version) {
        if (2 <= version && version <= 6) {
            return 7;
        }
        if (14 <= version && version <= 20) {
            return 3;
        }
        if (21 <= version && version <= 27) {
            return 4;
        }
        if (28 <= version && version <= 34) {
            return 3;
        }
        return 0;
    }

    /*
    *   获取 Alignment Pattern Locations
    * */
    public static int[] getAlignmentLocations(int version){
        return AlignmentPatternLocations[version - 1];
    }

    /*
    *   获取格式信息
    * */
    public static String getFormatStringBits(int ECCLevel, int maskPattern){
        assert ECCLevel <= 3 && ECCLevel >= 0;
        assert maskPattern <= 7 && maskPattern >= 0;
        return FormatStrings[ECCLevel * 8 + maskPattern];
    }

    /*
    *   获取版本信息
    * */
    public static String getVersionStringBits(int version){
        assert version >= 7 && version <= 40;
        return VersionStrings[version - 7];
    }
}
